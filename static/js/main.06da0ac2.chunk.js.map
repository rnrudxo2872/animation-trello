{"version":3,"sources":["atoms.ts","styleds/Boards.styled.ts","styleds/Card.styled.ts","components/DragabbleCard.tsx","styleds/InserBox.styled.ts","validations/InsertBox.validation.ts","components/InsertBox.tsx","components/Board.tsx","styleds/App.styled.ts","App.tsx","defaultStyle.ts","index.tsx","theme.ts"],"names":["ToDoAtom","atom","key","default","Doing","Done","BoardWrapper","styled","div","BoardTitle","h2","props","theme","textColor","DropArea","isDraggingOver","draggingFromThisWith","Card","DragabbleCard","index","value","draggableId","Date","now","provided","ref","innerRef","draggableProps","dragHandleProps","React","memo","InsertForm","form","Insert","input","ErrorMsg","span","textHighlight","highlightShadow","InsertToDoValidate","required","message","InsertBox","sectionName","BASE_NAME","useForm","register","handleSubmit","errors","formState","setValue","setToDoList","useSetRecoilState","onSubmit","data","allToDoList","CopyList","push","placeholder","Board","toDos","title","droppableId","snapshot","droppableProps","map","AppWrapper","Boards","App","useRecoilState","setToDos","onDragEnd","result","destination","source","todos","OriginToDo","TargetToDo","splice","CopyToDo","Object","keys","toDo","DefaultStyle","createGlobalStyle","bgColor","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.06da0ac2.chunk.js","sourcesContent":["import { atom } from \"recoil\";\r\n\r\ninterface IToDoState {\r\n  [key: string]: string[];\r\n}\r\n\r\nexport const ToDoAtom = atom<IToDoState>({\r\n  key: \"todoAtom\",\r\n  default: {\r\n    \"To Do\": [],\r\n    Doing: [],\r\n    Done: [],\r\n  },\r\n});\r\n","import styled from \"styled-components\";\r\nimport { IArea } from \"../interfaces/Board.interface\";\r\n\r\nexport const BoardWrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  padding-top: 20px;\r\n  height: fit-content;\r\n  min-height: 160px;\r\n  min-width: 360px;\r\n  background-color: #9090da;\r\n  border-radius: 12px;\r\n  box-shadow: 1px 1px 2px rgba(1, 1, 1, 0.3);\r\n  overflow: hidden;\r\n`;\r\n\r\nexport const BoardTitle = styled.h2`\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n  margin-bottom: 10px;\r\n  text-align: center;\r\n  color: ${(props) => props.theme.textColor};\r\n`;\r\n\r\nexport const DropArea = styled.div<IArea>`\r\n  flex-grow: 1;\r\n  padding: 30px;\r\n  background-color: ${(props) =>\r\n    props.isDraggingOver\r\n      ? \"#AFAFE9\"\r\n      : props.draggingFromThisWith == null\r\n      ? \"transparent\"\r\n      : \"#8686CB\"};\r\n  transition: background-color 1s cubic-bezier(0.075, 0.82, 0.165, 1);\r\n`;\r\n","import styled from \"styled-components\";\r\n\r\nexport const Card = styled.div`\r\n  padding: 10px 10px;\r\n  background-color: #e7dede;\r\n  border-radius: 5px;\r\n  margin-bottom: 10px;\r\n  box-shadow: 1px 1px 2px rgba(1, 1, 1, 0.3);\r\n  color: ${(props) => props.theme.textColor};\r\n  height: fit-content;\r\n`;\r\n","import React from \"react\"\r\nimport { Draggable } from \"react-beautiful-dnd\";\r\nimport { ICard } from \"../interfaces/Card.interface\";\r\nimport { Card } from \"../styleds/Card.styled\";\r\n\r\nfunction DragabbleCard({index, value}:ICard) {\r\n    return(\r\n        <Draggable index={index} draggableId={value+Date.now()}>\r\n            {(provided) => (\r\n                <Card ref={provided.innerRef} {...provided.draggableProps} {...provided.dragHandleProps}>\r\n                    {value}\r\n                </Card>\r\n            )}\r\n        </Draggable>\r\n    )\r\n}\r\n\r\nexport default React.memo(DragabbleCard);","import styled from \"styled-components\";\r\n\r\nexport const InsertForm = styled.form`\r\n  display: flex;\r\n  flex-direction: column;\r\n`;\r\n\r\nexport const Insert = styled.input`\r\n  flex-grow: 1;\r\n  margin: 5px 5px;\r\n  margin-bottom: 10px;\r\n  border: none;\r\n  border-radius: 5px;\r\n  padding: 10px 10px;\r\n`;\r\n\r\nexport const ErrorMsg = styled.span`\r\n  font-weight: 700;\r\n  margin-bottom: 12px;\r\n  text-align: center;\r\n  color: ${(props) => props.theme.textHighlight};\r\n  text-shadow: 1px 1px 1px ${(props) => props.theme.highlightShadow},\r\n    -1px -1px 1px ${(props) => props.theme.highlightShadow};\r\n`;\r\n","import { RegisterOptions } from \"react-hook-form\";\r\n\r\nexport const InsertToDoValidate: RegisterOptions = {\r\n  required: {\r\n    value: true,\r\n    message: \"white space is not correct\",\r\n  },\r\n};\r\n","import React from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\nimport { useSetRecoilState } from \"recoil\";\r\nimport { ToDoAtom } from \"../atoms\";\r\nimport { IFormState, IInsertBox } from \"../interfaces/InsertBox.interface\";\r\nimport { ErrorMsg, Insert, InsertForm } from \"../styleds/InserBox.styled\";\r\nimport { InsertToDoValidate } from \"../validations/InsertBox.validation\";\r\n\r\nfunction InsertBox({sectionName}:IInsertBox) {\r\n    const BASE_NAME = `${sectionName}_insert`;\r\n    \r\n    const { register, handleSubmit, formState:{ errors }, setValue } = useForm<IFormState>();\r\n    const setToDoList = useSetRecoilState(ToDoAtom)\r\n    \r\n    const OnSubmit = (data:IFormState) => {\r\n        \r\n        setToDoList((allToDoList) => {\r\n            const CopyList = [...allToDoList[sectionName]];\r\n            CopyList.push(data[BASE_NAME]);\r\n            \r\n            return {\r\n                ...allToDoList,\r\n                [sectionName] : CopyList\r\n            }\r\n        })\r\n        setValue(BASE_NAME, '');\r\n    }\r\n\r\n    return (\r\n        <InsertForm onSubmit={handleSubmit(OnSubmit)}>\r\n            <Insert placeholder=\"Insert content\" {...register(BASE_NAME, InsertToDoValidate)} />\r\n            {errors[BASE_NAME] ? <ErrorMsg>{errors[BASE_NAME].message}!</ErrorMsg> : null}\r\n        </InsertForm>\r\n    )\r\n}\r\n\r\nexport default React.memo(InsertBox);","import { Droppable } from \"react-beautiful-dnd\";\r\nimport { IBoard } from \"../interfaces/Board.interface\";\r\nimport { BoardTitle, BoardWrapper, DropArea } from \"../styleds/Boards.styled\";\r\nimport DragabbleCard from \"./DragabbleCard\";\r\nimport InsertBox from \"./InsertBox\";\r\n\r\nfunction Board({toDos, title}:IBoard) {\r\n    return (\r\n        <BoardWrapper>\r\n            <BoardTitle>{title}</BoardTitle>\r\n            <Droppable droppableId={title}>\r\n                {(provided, snapshot) => \r\n                <DropArea isDraggingOver={snapshot.isDraggingOver} draggingFromThisWith={snapshot.draggingFromThisWith} ref={provided.innerRef} {...provided.droppableProps}>\r\n                    {toDos.map((value, index) => (\r\n                        <DragabbleCard key={index} index={index} value={value} />\r\n                    )\r\n                    )}\r\n                    {provided.placeholder}\r\n                </DropArea>\r\n                }\r\n            </Droppable>\r\n            <InsertBox sectionName={title} />\r\n        </BoardWrapper>\r\n    )\r\n}\r\n\r\nexport default Board;","import styled from \"styled-components\";\r\n\r\nexport const AppWrapper = styled.div`\r\n  display: flex;\r\n  height: 100vh;\r\n  width: 100%;\r\n  margin: 0 auto;\r\n  justify-content: center;\r\n  align-items: center;\r\n`;\r\n\r\nexport const Boards = styled.div`\r\n  display: grid;\r\n  grid-template-columns: repeat(3, 1fr);\r\n  grid-gap: 10px;\r\n`;\r\n","import { DragDropContext, DropResult } from \"react-beautiful-dnd\"\nimport { useRecoilState } from \"recoil\";\nimport { ToDoAtom } from \"./atoms\";\nimport Board from \"./components/Board\";\nimport { AppWrapper, Boards } from \"./styleds/App.styled\";\n\nfunction App() {\n  const [toDos, setToDos] = useRecoilState(ToDoAtom);\n\n  const onDragEnd = (result:DropResult) => {\n    const {\n      destination,\n      source:{\n        index,\n        droppableId\n      }\n    } = result;\n\n    if(!destination) return;\n\n    // If same board\n    if(destination.droppableId === droppableId){\n      setToDos(todos => {\n        const CopyToDo = [...todos[droppableId]];\n        \n        CopyToDo.splice(index, 1);\n        CopyToDo.splice(destination.index, 0, todos[droppableId][index]);\n      \n        return {\n          ...todos,\n          [droppableId]:CopyToDo\n        };\n      })\n      return;\n    }\n\n    setToDos(todos => {\n      const OriginToDo = [...todos[droppableId]];\n      const TargetToDo = [...todos[destination.droppableId]];\n\n      OriginToDo.splice(index, 1);\n      TargetToDo.splice(destination.index, 0, todos[droppableId][index]);\n\n      return {\n        ...todos,\n        [droppableId]:OriginToDo,\n        [destination.droppableId]:TargetToDo\n      }\n    })\n  }\n\n  return (\n    <DragDropContext onDragEnd={onDragEnd}>\n      <AppWrapper>\n        <Boards>\n          {Object.keys(toDos).map(toDo => <Board key={toDo} title={toDo} toDos={toDos[toDo]}></Board>)}\n        </Boards>\n      </AppWrapper>\n    </DragDropContext>\n  );\n}\n\nexport default App;","import { createGlobalStyle } from \"styled-components\";\r\n\r\nexport const DefaultStyle = createGlobalStyle`\r\n      html, body, div, span, applet, object, iframe,\r\nh1, h2, h3, h4, h5, h6, p, blockquote, pre,\r\na, abbr, acronym, address, big, cite, code,\r\ndel, dfn, em, img, ins, kbd, q, s, samp,\r\nsmall, strike, strong, sub, sup, tt, var,\r\nb, u, i, center,\r\ndl, dt, dd, ol, ul, li,\r\nfieldset, form, label, legend,\r\ntable, caption, tbody, tfoot, thead, tr, th, td,\r\narticle, aside, canvas, details, embed,\r\nfigure, figcaption, footer, header, hgroup,\r\nmenu, nav, output, ruby, section, summary,\r\ntime, mark, audio, video {\r\n  margin: 0;\r\n\tpadding: 0;\r\n\tborder: 0;\r\n\tfont-size: 100%;\r\n\tfont: inherit;\r\n\tvertical-align: baseline;\r\n}\r\n:focus {\r\n    outline: 0;\r\n}\r\narticle, aside, details, figcaption, figure,\r\nfooter, header, hgroup, menu, nav, section {\r\n\tdisplay: block;\r\n}\r\nbody {\r\n\tline-height: 1;\r\n}\r\nol, ul {\r\n\tlist-style: none;\r\n}\r\nblockquote, q {\r\n\tquotes: none;\r\n}\r\nblockquote:before, blockquote:after,\r\nq:before, q:after {\r\n\tcontent: '';\r\n\tcontent: none;\r\n}\r\ntable {\r\n\tborder-collapse: collapse;\r\n\tborder-spacing: 0;\r\n}\r\ninput[type=search]::-webkit-search-cancel-button,\r\ninput[type=search]::-webkit-search-decoration,\r\ninput[type=search]::-webkit-search-results-button,\r\ninput[type=search]::-webkit-search-results-decoration {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n}\r\ninput[type=search] {\r\n    -webkit-appearance: none;\r\n    -moz-appearance: none;\r\n    -webkit-box-sizing: content-box;\r\n    -moz-box-sizing: content-box;\r\n    box-sizing: content-box;\r\n}\r\ntextarea {\r\n    overflow: auto;\r\n    vertical-align: top;\r\n    resize: vertical;\r\n}\r\naudio,\r\ncanvas,\r\nvideo {\r\n    display: inline-block;\r\n    *display: inline;\r\n    *zoom: 1;\r\n    max-width: 100%;\r\n}\r\naudio:not([controls]) {\r\n    display: none;\r\n    height: 0;\r\n}\r\n[hidden] {\r\n    display: none;\r\n}\r\nhtml {\r\n    font-size: 100%; /* 1 */\r\n    -webkit-text-size-adjust: 100%; /* 2 */\r\n    -ms-text-size-adjust: 100%; /* 2 */\r\n}\r\na {\r\n    text-decoration: none;\r\n    color:inherit;\r\n}\r\na:focus {\r\n    outline: thin dotted;\r\n}\r\na:active,\r\na:hover {\r\n    outline: 0;\r\n}\r\nimg {\r\n    border: 0; /* 1 */\r\n    -ms-interpolation-mode: bicubic; /* 2 */\r\n}\r\nfigure {\r\n    margin: 0;\r\n}\r\nform {\r\n    margin: 0;\r\n}\r\nfieldset {\r\n    border: 1px solid #c0c0c0;\r\n    margin: 0 2px;\r\n    padding: 0.35em 0.625em 0.75em;\r\n}\r\nlegend {\r\n    border: 0; /* 1 */\r\n    padding: 0;\r\n    white-space: normal; /* 2 */\r\n    *margin-left: -7px; /* 3 */\r\n}\r\nbutton,\r\ninput,\r\nselect,\r\ntextarea {\r\n    font-size: 100%; /* 1 */\r\n    margin: 0; /* 2 */\r\n    vertical-align: baseline; /* 3 */\r\n    *vertical-align: middle; /* 3 */\r\n}\r\nbutton,\r\ninput {\r\n    line-height: normal;\r\n}\r\nbutton,\r\nselect {\r\n    text-transform: none;\r\n}\r\nbutton,\r\nhtml input[type=\"button\"], /* 1 */\r\ninput[type=\"reset\"],\r\ninput[type=\"submit\"] {\r\n    -webkit-appearance: button; /* 2 */\r\n    cursor: pointer; /* 3 */\r\n    *overflow: visible;  /* 4 */\r\n}\r\nbutton[disabled],\r\nhtml input[disabled] {\r\n    cursor: default;\r\n}\r\ninput[type=\"checkbox\"],\r\ninput[type=\"radio\"] {\r\n    box-sizing: border-box; /* 1 */\r\n    padding: 0; /* 2 */\r\n    *height: 13px; /* 3 */\r\n    *width: 13px; /* 3 */\r\n}\r\ninput[type=\"search\"] {\r\n    -webkit-appearance: textfield; /* 1 */\r\n    -moz-box-sizing: content-box;\r\n    -webkit-box-sizing: content-box; /* 2 */\r\n    box-sizing: content-box;\r\n}\r\ninput[type=\"search\"]::-webkit-search-cancel-button,\r\ninput[type=\"search\"]::-webkit-search-decoration {\r\n    -webkit-appearance: none;\r\n}\r\nbutton::-moz-focus-inner,\r\ninput::-moz-focus-inner {\r\n    border: 0;\r\n    padding: 0;\r\n}\r\ntextarea {\r\n    overflow: auto; /* 1 */\r\n    vertical-align: top; /* 2 */\r\n}\r\ntable {\r\n    border-collapse: collapse;\r\n    border-spacing: 0;\r\n}\r\nhtml,\r\nbutton,\r\ninput,\r\nselect,\r\ntextarea {\r\n    color: #222;\r\n}\r\n::-moz-selection {\r\n    background: #b3d4fc;\r\n    text-shadow: none;\r\n}\r\n::selection {\r\n    background: #b3d4fc;\r\n    text-shadow: none;\r\n}\r\nimg {\r\n    vertical-align: middle;\r\n}\r\nfieldset {\r\n    border: 0;\r\n    margin: 0;\r\n    padding: 0;\r\n}\r\ntextarea {\r\n    resize: vertical;\r\n}\r\n.chromeframe {\r\n    margin: 0.2em 0;\r\n    background: #ccc;\r\n    color: #000;\r\n    padding: 0.2em 0;\r\n}\r\nbody {\r\n    background: ${(props) => props.theme.bgColor};\r\n    color: ${(props) => props.theme.textColor};\r\n} \r\n`;\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { RecoilRoot } from 'recoil';\nimport { ThemeProvider } from 'styled-components';\nimport App from './App';\nimport { DefaultStyle } from './defaultStyle';\nimport { BaseTheme } from './theme';\n\nReactDOM.render(\n  <React.StrictMode>\n      <ThemeProvider theme={BaseTheme}>\n        <RecoilRoot>\n          <DefaultStyle />\n          <App />\n        </RecoilRoot>\n      </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);","import { DefaultTheme } from \"styled-components\";\r\n\r\nexport const BaseTheme: DefaultTheme = {\r\n  bgColor:\r\n    \"linear-gradient(90deg, rgba(192,189,237,1) 15%, rgba(219,194,194,0.8468429608171394) 42%, rgba(0,212,255,1) 98%);\",\r\n  textColor: \"#4B4453\",\r\n  textHighlight: \"#923405\",\r\n  highlightShadow: \"#C7C3C1\",\r\n};\r\n"],"sourceRoot":""}